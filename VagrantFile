
# vagrant-ohai (0.1.13)

systems = [
     { # workstation
          :name => "workstation",
          :type => "workstation",
          :role => "workstation",
          # TODO: Update to Ubuntu 18.04
          # :box => "ubuntu/bionic64",
          # :box_version => "20190621.0.0",
          :box  =>  "ubuntu/xenial64",
          :box_version => "20180831.0.0",
          :eth1 => "10.1.1.100",
          :mem => "4096",
          :cpu => "4"
     },
     { # TestServer
          :name => "TestServer",
          :type => "server",
          :role => "Development",
          :box  =>  "centos/7",
          :box_version => "1902.01",
          :eth1 => "10.1.1.101",
          :mem => "2048",
          :cpu => "2"
     },     
     { # ns0
          :name => "ns0",
          :type => "server",
          :role => "DNS",
          :box  =>  "centos/7",
          :box_version => "1902.01",
          :eth1 => "10.1.1.10",
          :mem => "2048",
          :cpu => "2"
     },
     { # consul
          :name => "consul",
          :type => "server",
          :role => "SecretsStore",
          :box  =>  "centos/7",
          :box_version => "1902.01",
          :eth1 => "10.1.1.11",
          :mem => "2048",
          :cpu => "2"
     },
     { # vault
          :name => "vault",
          :type => "server",
          :role => "Secrets",
          :box  =>  "centos/7",
          :box_version => "1902.01",
          :eth1 => "10.1.1.12",
          :mem => "2048",
          :cpu => "2"
     },
     { # jenkins-master
          :name => "jenkins-master",
          :type => "server",
          :role => "buildSystem",
          :box  =>  "centos/7",
          :box_version => "1902.01",
          :eth1 => "10.1.1.13",
          :mem => "2048",
          :cpu => "2"
     },
     { # ldap
          :name => "ldap",
          :type => "server",
          :role => "auth",
          :box  =>  "centos/7",
          :box_version => "1902.01",
          :eth1 => "10.1.1.14",
          :mem => "2048",
          :cpu => "2"
     } ,
     { # artifactory
          :name => "artifactory",
          :type => "server",
          :role => "auth",
          :box  =>  "centos/7",
          :box_version => "1902.01",
          :eth1 => "10.1.1.15",
          :mem => "2048",
          :cpu => "2"
     }                       
]

Vagrant.configure("2") do |config|
     systems.each do |opts|
          config.vm.define opts[:name] do |config|
               
               # Create Servers
               config.vm.box = opts[:box]
               config.vm.box_version = opts[:box_version]
               config.vm.hostname = opts[:name]
               config.vm.network "private_network", ip: opts[:eth1]

               config.ssh.insert_key = false
               config.ssh.private_key_path = ['~/.vagrant.d/insecure_private_key', 'sshKeys/vagrantKey']
               config.vm.provision "file", source: "sshKeys/vagrantKey.pub", destination: "~/.ssh/authorized_keys" 


               config.vm.provider "virtualbox" do |v|
                    v.name = opts[:name]
                    v.customize ["modifyvm", :id, "--memory", opts[:mem]]
                    v.customize ["modifyvm", :id, "--cpus", opts[:cpu]]
               end

               if ENV['VAGRANT_DATA_MOUNT']

                    config.vm.synced_folder ENV['VAGRANT_DATA_MOUNT'], "/data"
               end

               # Configure Servers
               if opts[:type] == "workstation"
                    # Configure our workstation. This has tools and "stuff" to make management easy. 
                    # Why install on your host if you don't have to!
                    config.vm.provision "file", source: "sshKeys/vagrantKey", destination: "~/.ssh/id_rsa" 
                    config.vm.provision "file", source: "sshKeys/vagrantKey.pub", destination: "~/.ssh/id_rsa.pub" 

                    config.vm.provision "shell", path: "ServerConfigurations/ubuntu/dockerInstall.sh"
                    config.vm.provision "shell", path: "ServerConfigurations/ubuntu/basics.sh"
                    config.vm.provision "shell", path: "ApplicationInstalls/workstation/hashistackInstall.sh"
                    config.vm.provision "shell", path: "ApplicationInstalls/workstation/awsCLI.sh"
                    config.vm.provision "shell", path: "ApplicationInstalls/workstation/install-ansible.sh"
                    # TODO: Install GitClient

                    # If there are local SSH Keys, mount the directory to /home/vagrant/.ssh
                    if ENV['VAGRANT_SSH_KEY_LOCATION']
                         config.vm.provision "file", source: ENV['VAGRANT_SSH_KEY_LOCATION'], destination: "/home/vagrant/.ssh"
                    end

                    # If there code to share with the workstation, mount the code directory
                    if ENV['VAGRANT_LOCAL_MOUNT']
                         config.vm.synced_folder ENV['VAGRANT_LOCAL_MOUNT'], "/home/vagrant/code"
                    end
                    
                    # chmod the files in /home/vagrant/.ssh directory so the vagrant user can use them
                    config.vm.provision "shell", inline: "echo \"# Modify the .ssh contents so only vagrant can access\" >> .bashrc"
                    config.vm.provision "shell", inline: "echo \"chmod 700 /home/vagrant/.ssh/* || true\" >> .bashrc"                         
               else 
                    #  Configure Servers!!!!
                    # Yeah, Yeah.. I could do a switch case and use ansible to configure the servers
                    # but... hey... this is a WORK IN PROGRESS and in the immortal words of Ron Jeremy... quick and dirty first
                    
                    # LDAP!
                    if opts[:name] == "ldap"
                         config.vm.provision "shell", path: "ServerConfigurations/centos/basics.sh"
                         config.vm.provision "file", source: "ApplicationInstalls/ldap/files/", destination: "/tmp/"
                         config.vm.provision "shell", path: "ApplicationInstalls/ldap/ldap.sh"
                    end
                                        
                    # Artifactory!
                    if opts[:name] == "artifactory"
                         config.vm.provision "shell", path: "ServerConfigurations/centos/basics.sh"
                         config.vm.provision "file", source: "ApplicationInstalls/artifactory/files/", destination: "/tmp/"
                         config.vm.provision "shell", path: "ApplicationInstalls/artifactory/artifactory.sh"
                    end

                    # Jenkins Master!
                    if opts[:name] == "jenkins-master"
                         config.vm.provision "shell", path: "ServerConfigurations/centos/basics.sh"
                         config.vm.provision "file", source: "ApplicationInstalls/jenkins-master/jenkins/", destination: "/tmp/"
                         config.vm.provision "shell", path: "ServerConfigurations/centos/docker.sh"
                         config.vm.provision "shell", path: "ApplicationInstalls/jenkins-master/jenkins-master.sh"
                    end      
                    
                    # Vault!
                    if opts[:name] == "vault"
                         config.vm.provision "shell", path: "ServerConfigurations/centos/basics.sh"
                         config.vm.provision "shell", path: "ServerConfigurations/centos/docker.sh"
                         config.vm.provision "file", source: "ApplicationInstalls/vault/vault/", destination: "/tmp/"
                         config.vm.provision "shell", path: "ApplicationInstalls/vault/vault.sh"
                    end 
               end
          end
     end
end 